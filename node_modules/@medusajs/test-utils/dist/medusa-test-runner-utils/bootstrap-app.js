"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.startApp = startApp;
const express_1 = __importDefault(require("express"));
const get_port_1 = __importDefault(require("get-port"));
const path_1 = require("path");
const utils_1 = require("./utils");
const utils_2 = require("@medusajs/framework/utils");
async function bootstrapApp({ cwd, env = {}, } = {}) {
    const app = (0, express_1.default)();
    (0, utils_1.applyEnvVarsToProcess)(env);
    const loaders = require("@medusajs/medusa/loaders/index").default;
    const { container, shutdown } = await loaders({
        directory: (0, path_1.resolve)(cwd || process.cwd()),
        expressApp: app,
    });
    const PORT = process.env.PORT ? parseInt(process.env.PORT) : await (0, get_port_1.default)();
    return {
        shutdown,
        container,
        app,
        port: PORT,
    };
}
async function startApp({ cwd, env = {}, } = {}) {
    const { app, port, container, shutdown: medusaShutdown, } = await bootstrapApp({
        cwd,
        env,
    });
    let expressServer;
    const shutdown = async () => {
        await (0, utils_2.promiseAll)([expressServer?.shutdown(), medusaShutdown()]);
        if (typeof global !== "undefined" && global?.gc) {
            global.gc();
        }
    };
    return await new Promise((resolve, reject) => {
        const server = app
            .listen(port)
            .on("error", async (err) => {
            await shutdown();
            return reject(err);
        })
            .on("listening", () => {
            process.send?.(port);
            resolve({
                shutdown,
                container,
                port,
            });
        });
        // TODO: fix that once we find the appropriate place to put this util
        expressServer = utils_2.GracefulShutdownServer.create(server);
    });
}
//# sourceMappingURL=bootstrap-app.js.map