import { AdditionalData, CreateOrderDTO } from "@medusajs/framework/types";
import { WorkflowData } from "@medusajs/framework/workflows-sdk";
/**
 * The data to create an order, along with custom data that's passed to the workflow's hooks.
 */
export type CreateOrderWorkflowInput = CreateOrderDTO & AdditionalData;
export declare const createOrdersWorkflowId = "create-orders";
/**
 * This workflow creates an order. It's used by the [Create Draft Order Admin API Route](https://docs.medusajs.com/api/admin#draft-orders_postdraftorders), but
 * you can also use it to create any order.
 *
 * This workflow has a hook that allows you to perform custom actions on the created order. For example, you can pass under `additional_data` custom data that
 * allows you to create custom data models linked to the order.
 *
 * You can also use this workflow within your customizations or your own custom workflows, allowing you to wrap custom logic around creating an order. For example,
 * you can create a workflow that imports orders from an external system, then uses this workflow to create the orders in Medusa.
 *
 * @example
 * const { result } = await createOrderWorkflow(container)
 * .run({
 *   input: {
 *     region_id: "reg_123",
 *     items: [
 *       {
 *         variant_id: "variant_123",
 *         quantity: 1,
 *         title: "Shirt",
 *         unit_price: 10
 *       }
 *     ],
 *     sales_channel_id: "sc_123",
 *     status: "pending",
 *     shipping_address: {
 *       first_name: "John",
 *       last_name: "Doe",
 *       address_1: "123 Main St",
 *       city: "Los Angeles",
 *       country_code: "us",
 *       postal_code: "90001"
 *     },
 *     additional_data: {
 *       sync_oms: true
 *     }
 *   }
 * })
 *
 * @summary
 *
 * Create an order.
 *
 * @property hooks.orderCreated - This hook is executed after the order is created. You can consume this hook to perform custom actions on the created order.
 */
export declare const createOrderWorkflow: import("@medusajs/framework/workflows-sdk").ReturnWorkflow<CreateOrderWorkflowInput, import("@medusajs/framework/types").OrderDTO, import("@medusajs/framework/workflows-sdk").Hook<"orderCreated", {
    order: WorkflowData<import("@medusajs/framework/types").OrderDTO>;
    additional_data: ((Record<string, unknown> | WorkflowData<Record<string, unknown> | undefined>) & Record<string, unknown>) | undefined;
}>[]>;
/**
 * @deprecated Instead use the singular name `createOrderWorkflow`.
 */
export declare const createOrdersWorkflow: import("@medusajs/framework/workflows-sdk").ReturnWorkflow<CreateOrderWorkflowInput, import("@medusajs/framework/types").OrderDTO, import("@medusajs/framework/workflows-sdk").Hook<"orderCreated", {
    order: WorkflowData<import("@medusajs/framework/types").OrderDTO>;
    additional_data: ((Record<string, unknown> | WorkflowData<Record<string, unknown> | undefined>) & Record<string, unknown>) | undefined;
}>[]>;
//# sourceMappingURL=create-order.d.ts.map