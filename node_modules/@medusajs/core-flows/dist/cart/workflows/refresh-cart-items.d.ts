/**
 * The details of the cart to refresh.
 */
export type RefreshCartItemsWorkflowInput = {
    /**
     * The cart's ID.
     */
    cart_id: string;
    /**
     * The promotion codes applied on the cart.
     * These promotion codes will replace previously applied codes.
     */
    promo_codes?: string[];
    /**
     * Force refresh the cart items
     */
    force_refresh?: boolean;
    /**
     * The items to refresh.
     */
    items?: any[];
    /**
     * The shipping methods to refresh.
     */
    shipping_methods?: any[];
    /**
     * Whether to force re-calculating tax amounts, which
     * may include sending requests to a third-part tax provider, depending
     * on the configurations of the cart's tax region.
     */
    force_tax_calculation?: boolean;
};
export declare const refreshCartItemsWorkflowId = "refresh-cart-items";
/**
 * This workflow refreshes a cart to ensure its prices, promotion codes, taxes, and other details are applied correctly. It's useful
 * after making a chnge to a cart, such as after adding an item to the cart or adding a promotion code.
 *
 * This workflow is used by other cart-related workflows, such as the {@link addToCartWorkflow} after an item
 * is added to the cart.
 *
 * You can use this workflow within your own customizations or custom workflows, allowing you to refresh the cart after making updates to it in your
 * custom flows.
 *
 * @example
 * const { result } = await refreshCartItemsWorkflow(container)
 * .run({
 *   input: {
 *     cart_id: "cart_123",
 *   }
 * })
 *
 * @summary
 *
 * Refresh a cart's details after an update.
 *
 */
export declare const refreshCartItemsWorkflow: import("@medusajs/framework/workflows-sdk").ReturnWorkflow<RefreshCartItemsWorkflowInput, any, []>;
//# sourceMappingURL=refresh-cart-items.d.ts.map