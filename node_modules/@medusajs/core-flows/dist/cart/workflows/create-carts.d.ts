import { AdditionalData, CreateCartWorkflowInputDTO } from "@medusajs/framework/types";
import { WorkflowData } from "@medusajs/framework/workflows-sdk";
/**
 * The data to create the cart, along with custom data that's passed to the workflow's hooks.
 */
export type CreateCartWorkflowInput = CreateCartWorkflowInputDTO & AdditionalData;
export declare const createCartWorkflowId = "create-cart";
/**
 * This workflow creates and returns a cart. You can set the cart's items, region, customer, and other details. This workflow is executed by the
 * [Create Cart Store API Route](https://docs.medusajs.com/api/store#carts_postcarts).
 *
 * This workflow has a hook that allows you to perform custom actions on the created cart. You can see an example in [this guide](https://docs.medusajs.com/resources/commerce-modules/cart/extend#step-4-consume-cartcreated-workflow-hook).
 *
 * You can also use this workflow within your customizations or your own custom workflows, allowing you to wrap custom logic around cart creation.
 *
 * @example
 * const { result } = await createCartWorkflow(container)
 *   .run({
 *     input: {
 *       region_id: "reg_123",
 *       items: [
 *         {
 *           variant_id: "var_123",
 *           quantity: 1,
 *         }
 *       ],
 *       customer_id: "cus_123",
 *       additional_data: {
 *         external_id: "123"
 *       }
 *     }
 *   })
 *
 * @summary
 *
 * Create a cart specifying region, items, and more.
 *
 * @property hooks.validate - This hook is executed before all operations. You can consume this hook to perform any custom validation. If validation fails, you can throw an error to stop the workflow execution.
 * @property hooks.cartCreated - This hook is executed after a cart is created. You can consume this hook to perform custom actions on the created cart.
 */
export declare const createCartWorkflow: import("@medusajs/framework/workflows-sdk").ReturnWorkflow<CreateCartWorkflowInput, import("@medusajs/framework/types").CartDTO, (import("@medusajs/framework/workflows-sdk").Hook<"validate", {
    input: WorkflowData<{
        currency_code: string;
        region_id: string;
        customer_id?: string;
        sales_channel_id?: string;
        email?: string;
        shipping_address_id?: string;
        billing_address_id?: string;
        shipping_address?: import("@medusajs/framework/types").CreateCartAddressDTO | string;
        billing_address?: import("@medusajs/framework/types").CreateCartAddressDTO | string;
        metadata?: Record<string, unknown>;
        items?: import("@medusajs/framework/types").CreateCartCreateLineItemDTO[];
        promo_codes?: string[];
        additional_data?: Record<string, unknown>;
    }>;
    cart: WorkflowData<{
        items: any[];
        currency_code: string;
        region_id: string;
        customer_id?: string;
        sales_channel_id?: string;
        email?: string;
        shipping_address_id?: string;
        billing_address_id?: string;
        shipping_address?: import("@medusajs/framework/types").CreateCartAddressDTO | string;
        billing_address?: import("@medusajs/framework/types").CreateCartAddressDTO | string;
        metadata?: Record<string, unknown>;
        promo_codes?: string[];
        additional_data?: Record<string, unknown>;
    }>;
}> | import("@medusajs/framework/workflows-sdk").Hook<"cartCreated", {
    cart: WorkflowData<import("@medusajs/framework/types").CartDTO>;
    additional_data: ((Record<string, unknown> | WorkflowData<Record<string, unknown> | undefined>) & Record<string, unknown>) | undefined;
}>)[]>;
//# sourceMappingURL=create-carts.d.ts.map